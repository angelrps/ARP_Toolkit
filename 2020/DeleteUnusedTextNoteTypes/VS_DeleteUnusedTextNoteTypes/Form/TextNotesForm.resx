<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAgAAACtAAAA/wAAAP8AAACtAAAACAAAAAAAAAAAAAAAcwAAAP4AAAD/AAAA5QAAADAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFsAAAD6AAAA/wAAAOkAAAA0AAAAAAAAABgAAADLAAAA/wAAAP8AAACYAAAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAANIAAAD/AAAA/wAAAIEAAAAAAAAAYAAAAPoAAAD/AAAA7gAA
        AD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhwAAAP8AAAD/AAAAzQAAACUAAAC5AAAA/wAA
        AP8AAACsAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAA7AAAAP8AAAD1AAAAoAAA
        APEAAAD/AAAA9QAAAE8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAACyAAAA/wAA
        AP8AAAD7AAAA/wAAAP8AAAC+AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGAAAAD7AAAA/wAAAP8AAAD/AAAA+wAAAGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHQAAANYAAAD/AAAA/wAAAP8AAADOAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAjQAAAP8AAAD/AAAA/wAAAHcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7AAAA6wAAAP8AAADYAAAAJAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAABlAAAApQAAAE8AAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//4/P//8HB//+AgPAfgADwH8AA4B/AAfAf4AP4H/AH/B/gA/wf
        wAH+AEAA/gAAAP4AQID/AEHB/wfj4/+Dgf//g4P//4GD///BA///wQf//+AH///gD///4A////Af///w
        H///8D////g////4P////P//////////////////
</value>
  </data>
</root>